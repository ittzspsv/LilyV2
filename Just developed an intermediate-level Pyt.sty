Just developed an intermediate-level Python project – LilyV2, a modular Discord bot designed for real-world community management / engagement and automation on a discord server with 300k+ people.

The primary goal of this project is to get as much deeper into python and enhancing my skills at significantly even at First Year - Second Year (starting).  This took me an 4 months developing this project in parallel balancing my studies.Over the course of four months, I pushed myself to learn Python on a deeper level. I spent a significant amount of time learning how various tools and libraries function by reading documentation, experimenting, and applying them directly to this project. The majority of it was self-taught – creating features, testing them on a live server, and addressing issues based on what real users were experiencing. It wasn't always simple, but each challenge taught me something new.

⦿ This project was a great opportunity to sharpen my skills in:

➡Asynchronous Python with discord.py

➡Real-time communication using websocket-client

➡Web scraping with BeautifulSoup and requests

➡Advanced string matching and pattern matching | parsing via rapidfuzz, string manipulation in python

➡Lightweight non-blocking database management using aiosqlite while parallely solving an issue one-write per time using queue
w
⦿ LilyV2 isn’t just a bot—it’s a clean, modular codebase that demonstrates real-world use of asynchronous workflows, API integration, lightweight database management, and Discord API capabilities.

⦿ Key aspects of the build:

➡Cog-based architecture for modularity

➡Custom logging and debugging tools

➡Game-specific support logic requested

➡Structured error handling and response systems

⦿ This was a solo project intended to apply and showcase intermediate Python concepts through practical implementation.

⦿ Currently, LilyV2 is actively deployed in a 300,000+ member Discord community.

Check it out on GitHub: github.com/ittzspsv/LilyV2
